-- Sonar Platform - Complete Database Schema for Neon
-- Cleaned up version with generic notification triggers
-- All business logic triggers removed, generic change notifications added

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Create tracked_wallets table
CREATE TABLE IF NOT EXISTS tracked_wallets (
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    address text NOT NULL,
    alias text NULL,
    is_active boolean NULL DEFAULT true,
    tags text[] NULL,
    metadata jsonb NULL,
    created_at timestamp with time zone NULL DEFAULT now(),
    updated_at timestamp with time zone NULL DEFAULT now(),
    ui_color text NULL DEFAULT '#4338ca'::text,
    twitter_handle text NULL,
    telegram_channel text NULL,
    streaming_channel text NULL,
    image_data text NULL,
    notes text NULL,
    sol_balance numeric NULL DEFAULT 0,
    last_balance_check timestamp with time zone NULL,
    
    CONSTRAINT tracked_wallets_pkey PRIMARY KEY (id),
    CONSTRAINT tracked_wallets_address_key UNIQUE (address)
);

-- Create indexes for tracked_wallets
CREATE INDEX IF NOT EXISTS idx_tracked_wallets_active ON tracked_wallets USING btree (is_active);
CREATE INDEX IF NOT EXISTS idx_tracked_wallets_created_at ON tracked_wallets USING btree (created_at DESC);

-- Create tokens table
CREATE TABLE IF NOT EXISTS tokens (
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    address text NOT NULL,
    symbol text NOT NULL,
    name text NOT NULL,
    metadata jsonb NULL,
    last_seen timestamp with time zone NULL DEFAULT now(),
    created_at timestamp with time zone NULL DEFAULT now(),
    updated_at timestamp with time zone NULL DEFAULT now(),
    
    CONSTRAINT tokens_pkey PRIMARY KEY (id),
    CONSTRAINT tokens_address_key UNIQUE (address)
);

-- Create indexes for tokens
CREATE INDEX IF NOT EXISTS idx_tokens_symbol ON tokens USING btree (symbol);
CREATE INDEX IF NOT EXISTS idx_tokens_name ON tokens USING btree (name);

-- Create whale_trades table
CREATE TABLE IF NOT EXISTS whale_trades (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    wallet_address text NOT NULL,
    coin_address text NOT NULL,
    trade_type text NOT NULL,
    sol_amount numeric NULL,
    token_amount numeric NULL,
    transaction_hash text NOT NULL,
    trade_timestamp timestamp with time zone NOT NULL,
    created_at timestamp with time zone NULL DEFAULT now(),
    updated_at timestamp with time zone NULL DEFAULT now(),
    
    CONSTRAINT whale_trades_pkey PRIMARY KEY (id),
    CONSTRAINT whale_trades_transaction_hash_key UNIQUE (transaction_hash),
    CONSTRAINT whale_trades_trade_type_check CHECK ((trade_type = ANY (ARRAY['BUY'::text, 'SELL'::text]))),
    CONSTRAINT fk_wallet_address FOREIGN KEY (wallet_address) REFERENCES tracked_wallets(address),
    CONSTRAINT fk_coin_address FOREIGN KEY (coin_address) REFERENCES tokens(address)
);

-- Create indexes for whale_trades
CREATE INDEX IF NOT EXISTS idx_whale_trades_wallet_timestamp ON whale_trades USING btree (wallet_address, trade_timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_whale_trades_coin_timestamp ON whale_trades USING btree (coin_address, trade_timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_whale_trades_timestamp ON whale_trades USING btree (trade_timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_whale_trades_type ON whale_trades USING btree (trade_type);

-- Create trade_signals table
CREATE TABLE IF NOT EXISTS trade_signals (
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    coin_address text NOT NULL,
    status text NOT NULL DEFAULT 'OPEN'::text,
    trigger_reason text NULL,
    metadata jsonb NULL,
    created_at timestamp with time zone NULL DEFAULT now(),
    updated_at timestamp with time zone NULL DEFAULT now(),
    closed_at timestamp with time zone NULL,
    user_notes text NULL,
    
    CONSTRAINT trade_signals_pkey PRIMARY KEY (id),
    CONSTRAINT trade_signals_status_check CHECK ((status = ANY (ARRAY['OPEN'::text, 'EXECUTED'::text, 'EXPIRED'::text]))),
    CONSTRAINT fk_coin_address FOREIGN KEY (coin_address) REFERENCES tokens(address)
);

-- Create indexes for trade_signals
CREATE INDEX IF NOT EXISTS idx_trade_signals_status ON trade_signals USING btree (status);
CREATE INDEX IF NOT EXISTS idx_trade_signals_created_at ON trade_signals USING btree (created_at DESC);
CREATE INDEX IF NOT EXISTS idx_trade_signals_coin_address ON trade_signals USING btree (coin_address);

-- Create portfolio_trades table
CREATE TABLE IF NOT EXISTS portfolio_trades (
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    signal_id uuid NULL,
    trade_mode text NOT NULL,
    coin_address text NOT NULL,
    status text NOT NULL DEFAULT 'OPEN'::text,
    entry_price numeric NULL,
    high_water_mark_price numeric NULL,
    entry_timestamp timestamp with time zone NULL,
    exit_price numeric NULL,
    exit_timestamp timestamp with time zone NULL,
    pnl_usd numeric NULL,
    exit_reason text NULL,
    manual_close boolean NULL DEFAULT false,
    trade_amount_sol numeric NULL,
    pnl_percentage numeric NULL,
    current_price numeric NULL,
    created_at timestamp with time zone NULL DEFAULT now(),
    updated_at timestamp with time zone NULL DEFAULT now(),
    
    CONSTRAINT portfolio_trades_pkey PRIMARY KEY (id),
    CONSTRAINT portfolio_trades_trade_mode_check CHECK ((trade_mode = ANY (ARRAY['PAPER'::text, 'LIVE'::text]))),
    CONSTRAINT portfolio_trades_status_check CHECK ((status = ANY (ARRAY['OPEN'::text, 'PARTIALLY_CLOSED'::text, 'CLOSED'::text]))),
    CONSTRAINT fk_signal_id FOREIGN KEY (signal_id) REFERENCES trade_signals(id),
    CONSTRAINT fk_coin_address FOREIGN KEY (coin_address) REFERENCES tokens(address)
);

-- Create indexes for portfolio_trades
CREATE INDEX IF NOT EXISTS idx_portfolio_trades_status ON portfolio_trades USING btree (status);
CREATE INDEX IF NOT EXISTS idx_portfolio_trades_signal_id ON portfolio_trades USING btree (signal_id);
CREATE INDEX IF NOT EXISTS idx_portfolio_trades_coin_address ON portfolio_trades USING btree (coin_address);
CREATE INDEX IF NOT EXISTS idx_portfolio_trades_entry_timestamp ON portfolio_trades USING btree (entry_timestamp DESC);

-- Create signal_config table
CREATE TABLE IF NOT EXISTS signal_config (
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    min_whales integer NULL DEFAULT 3,
    time_window_hours integer NULL DEFAULT 1,
    min_trade_amount_sol numeric NULL DEFAULT 0.5,
    created_at timestamp with time zone NULL DEFAULT now(),
    updated_at timestamp with time zone NULL DEFAULT now(),
    
    CONSTRAINT signal_config_pkey PRIMARY KEY (id)
);

-- Create service_configs table
CREATE TABLE IF NOT EXISTS service_configs (
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    service_name text NOT NULL,
    log_categories jsonb NULL DEFAULT '{"debug": false, "trade": true, "health": true, "wallet": true, "dataFlow": false, "connection": true, "multiWhale": true, "transaction": false}'::jsonb,
    other_settings jsonb NULL DEFAULT '{}'::jsonb,
    ui_refresh_config jsonb NULL DEFAULT '{"pause_on_activity": true, "auto_refresh_enabled": true, "show_refresh_indicators": true, "balance_interval_minutes": 5}'::jsonb,
    created_at timestamp with time zone NULL DEFAULT now(),
    updated_at timestamp with time zone NULL DEFAULT now(),
    
    CONSTRAINT service_configs_pkey PRIMARY KEY (id),
    CONSTRAINT service_configs_service_name_key UNIQUE (service_name)
);

-- Create service_heartbeats table
CREATE TABLE IF NOT EXISTS service_heartbeats (
    service_name text NOT NULL,
    last_heartbeat timestamp with time zone NOT NULL,
    status text NOT NULL,
    metadata jsonb NULL,
    created_at timestamp with time zone NULL DEFAULT now(),
    updated_at timestamp with time zone NULL DEFAULT now(),
    
    CONSTRAINT service_heartbeats_pkey PRIMARY KEY (service_name),
    CONSTRAINT service_heartbeats_status_check CHECK ((status = ANY (ARRAY['healthy'::text, 'unhealthy'::text, 'stopped'::text])))
);

-- =====================================================
-- DATABASE CLEANUP COMPLETED
-- =====================================================
-- All database triggers and notification functions have been removed
-- Tables remain intact for application use

-- =====================================================
-- VIEWS (Updated to use standardized field names)
-- =====================================================

-- View: active_signals_detailed
CREATE OR REPLACE VIEW active_signals_detailed AS
SELECT ts.id,
    ts.coin_address,
    ts.status,
    ts.trigger_reason,
    ts.metadata,
    ts.created_at,
    ts.closed_at,
    ts.user_notes,
    t.symbol AS token_symbol,
    t.name AS token_name,
    ( SELECT count(DISTINCT wt.wallet_address) AS count
           FROM whale_trades wt
          WHERE ((wt.coin_address = ts.coin_address) 
            AND (wt.trade_timestamp >= (ts.created_at - '01:00:00'::interval)) 
            AND (wt.trade_type = 'BUY'::text))) AS whale_count,
    ( SELECT string_agg(DISTINCT COALESCE(tw.alias, wt.wallet_address), ', '::text) AS string_agg
           FROM (whale_trades wt
             JOIN tracked_wallets tw ON ((wt.wallet_address = tw.address)))
          WHERE ((wt.coin_address = ts.coin_address) 
            AND (wt.trade_timestamp >= (ts.created_at - '01:00:00'::interval)) 
            AND (wt.trade_type = 'BUY'::text))) AS whale_names
FROM (trade_signals ts
     LEFT JOIN tokens t ON ((ts.coin_address = t.address)))
WHERE (ts.status = 'OPEN'::text)
ORDER BY ts.created_at DESC;

-- View: dashboard_stats
CREATE OR REPLACE VIEW dashboard_stats AS
SELECT ( SELECT count(*) AS count
           FROM tracked_wallets
          WHERE (tracked_wallets.is_active = true)) AS active_wallets,
    ( SELECT count(*) AS count
           FROM portfolio_trades
          WHERE (portfolio_trades.status = 'OPEN'::text)) AS open_positions,
    ( SELECT count(*) AS count
           FROM trade_signals
          WHERE (trade_signals.created_at > (now() - '24:00:00'::interval))) AS signals_today,
    ( SELECT
                CASE
                    WHEN (count(*) > 0) THEN round((((count(*) FILTER (WHERE (portfolio_trades.pnl_percentage > (0)::numeric)))::numeric / (count(*))::numeric) * (100)::numeric), 2)
                    ELSE (0)::numeric
                END AS "case"
           FROM portfolio_trades
          WHERE ((portfolio_trades.status = 'CLOSED'::text) AND (portfolio_trades.pnl_percentage IS NOT NULL))) AS win_rate,
    ( SELECT COALESCE(round(sum(portfolio_trades.pnl_percentage), 2), (0)::numeric) AS "coalesce"
           FROM portfolio_trades
          WHERE ((portfolio_trades.status = 'CLOSED'::text) AND (portfolio_trades.pnl_percentage IS NOT NULL))) AS total_pnl;

-- View: recent_whale_trades
CREATE OR REPLACE VIEW recent_whale_trades AS
SELECT wt.id,
    wt.wallet_address,
    wt.coin_address,
    wt.trade_type,
    wt.sol_amount,
    wt.token_amount,
    wt.transaction_hash,
    wt.trade_timestamp,
    tw.alias AS wallet_alias,
    tw.ui_color AS wallet_color,
    tw.twitter_handle,
    tw.telegram_channel,
    tw.streaming_channel,
    tw.image_data,
    t.symbol AS token_symbol,
    t.name AS token_name
FROM ((whale_trades wt
     JOIN tracked_wallets tw ON ((wt.wallet_address = tw.address)))
     LEFT JOIN tokens t ON ((wt.coin_address = t.address)))
ORDER BY wt.trade_timestamp DESC
LIMIT 100;

-- =====================================================
-- DEFAULT DATA
-- =====================================================

-- Insert default signal configuration if not exists
INSERT INTO signal_config (min_whales, time_window_hours, min_trade_amount_sol)
SELECT 3, 1, 0.5
WHERE NOT EXISTS (SELECT 1 FROM signal_config);

-- Insert default service configurations if not exists
INSERT INTO service_configs (service_name, log_categories)
VALUES 
    ('whale-watcher', '{"debug": false, "trade": true, "health": true, "wallet": true, "dataFlow": false, "connection": true, "multiWhale": true, "transaction": false}'::jsonb),
    ('notifier', '{"debug": false, "trade": true, "health": true, "notification": true}'::jsonb),
    ('ui', '{"debug": false, "ui": true}'::jsonb)
ON CONFLICT (service_name) DO NOTHING;