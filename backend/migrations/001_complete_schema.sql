-- Complete Sonar Platform Database Schema Migration
-- This file contains the complete database schema for the Sonar Platform
-- Including: tables, views, functions, triggers, indexes, and constraints

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- =============================================================================
-- TABLES
-- =============================================================================

-- Tracked wallets table for monitoring whale wallets
CREATE TABLE IF NOT EXISTS tracked_wallets (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    address text NOT NULL UNIQUE,
    alias text,
    is_active boolean DEFAULT true,
    tags text[],
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    ui_color text DEFAULT '#4338ca'::text,
    twitter_handle text,
    telegram_channel text,
    streaming_channel text,
    image_data text,
    notes text,
    sol_balance numeric DEFAULT 0,
    last_balance_check timestamp with time zone
);

-- Tokens table for storing token information
CREATE TABLE IF NOT EXISTS tokens (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    address text NOT NULL UNIQUE,
    symbol text NOT NULL,
    name text NOT NULL,
    metadata jsonb,
    last_seen timestamp with time zone DEFAULT now()
);

-- Whale trades table for storing trade data from tracked wallets
CREATE TABLE IF NOT EXISTS whale_trades (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    wallet_address text NOT NULL,
    coin_address text NOT NULL,
    trade_type text NOT NULL CHECK (trade_type = ANY (ARRAY['BUY'::text, 'SELL'::text])),
    sol_amount numeric,
    token_amount numeric,
    transaction_hash text NOT NULL UNIQUE,
    trade_timestamp timestamp with time zone NOT NULL,
    CONSTRAINT fk_wallet_address FOREIGN KEY (wallet_address) REFERENCES tracked_wallets(address) ON DELETE CASCADE,
    CONSTRAINT fk_coin_address FOREIGN KEY (coin_address) REFERENCES tokens(address) ON DELETE CASCADE
);

-- Trade signals table for multi-whale buy signals
CREATE TABLE IF NOT EXISTS trade_signals (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    coin_address text NOT NULL,
    status text NOT NULL DEFAULT 'OPEN'::text CHECK (status = ANY (ARRAY['OPEN'::text, 'EXECUTED'::text, 'EXPIRED'::text])),
    trigger_reason text,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    closed_at timestamp with time zone,
    user_notes text,
    CONSTRAINT fk_coin_address FOREIGN KEY (coin_address) REFERENCES tokens(address) ON DELETE CASCADE
);

-- Portfolio trades table for tracking paper/live trades
CREATE TABLE IF NOT EXISTS portfolio_trades (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    signal_id uuid,
    trade_mode text NOT NULL CHECK (trade_mode = ANY (ARRAY['PAPER'::text, 'LIVE'::text])),
    coin_address text NOT NULL,
    status text NOT NULL DEFAULT 'OPEN'::text CHECK (status = ANY (ARRAY['OPEN'::text, 'PARTIALLY_CLOSED'::text, 'CLOSED'::text])),
    entry_price numeric,
    high_water_mark_price numeric,
    entry_timestamp timestamp with time zone,
    exit_price numeric,
    exit_timestamp timestamp with time zone,
    pnl_usd numeric,
    exit_reason text,
    manual_close boolean DEFAULT false,
    trade_amount_sol numeric,
    pnl_percentage numeric,
    current_price numeric,
    CONSTRAINT fk_signal_id FOREIGN KEY (signal_id) REFERENCES trade_signals(id) ON DELETE CASCADE,
    CONSTRAINT fk_coin_address FOREIGN KEY (coin_address) REFERENCES tokens(address) ON DELETE CASCADE
);

-- Signal configuration table for thresholds and settings
CREATE TABLE IF NOT EXISTS signal_config (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    min_whales integer DEFAULT 3,
    time_window_hours integer DEFAULT 1,
    min_trade_amount_sol numeric DEFAULT 0.5,
    created_at timestamp with time zone DEFAULT now()
);

-- Service heartbeats for monitoring service health
CREATE TABLE IF NOT EXISTS service_heartbeats (
    service_name text PRIMARY KEY,
    last_heartbeat timestamp with time zone NOT NULL,
    status text NOT NULL CHECK (status = ANY (ARRAY['healthy'::text, 'unhealthy'::text, 'stopped'::text])),
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now()
);

-- Service configurations for logging and UI settings
CREATE TABLE IF NOT EXISTS service_configs (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    service_name text NOT NULL UNIQUE,
    log_categories jsonb DEFAULT '{"debug": false, "trade": true, "health": true, "wallet": true, "dataFlow": false, "connection": true, "multiWhale": true, "transaction": false}'::jsonb,
    other_settings jsonb DEFAULT '{}'::jsonb,
    updated_at timestamp with time zone DEFAULT now(),
    ui_refresh_config jsonb DEFAULT '{"pause_on_activity": true, "auto_refresh_enabled": true, "show_refresh_indicators": true, "balance_interval_minutes": 5}'::jsonb
);

-- =============================================================================
-- INDEXES
-- =============================================================================

-- Indexes for whale_trades
CREATE INDEX IF NOT EXISTS idx_whale_trades_wallet_timestamp ON whale_trades(wallet_address, trade_timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_whale_trades_coin_timestamp ON whale_trades(coin_address, trade_timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_whale_trades_timestamp ON whale_trades(trade_timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_whale_trades_type ON whale_trades(trade_type);

-- Indexes for trade_signals
CREATE INDEX IF NOT EXISTS idx_trade_signals_status ON trade_signals(status);
CREATE INDEX IF NOT EXISTS idx_trade_signals_created_at ON trade_signals(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_trade_signals_coin_address ON trade_signals(coin_address);

-- Indexes for portfolio_trades
CREATE INDEX IF NOT EXISTS idx_portfolio_trades_status ON portfolio_trades(status);
CREATE INDEX IF NOT EXISTS idx_portfolio_trades_signal_id ON portfolio_trades(signal_id);
CREATE INDEX IF NOT EXISTS idx_portfolio_trades_coin_address ON portfolio_trades(coin_address);
CREATE INDEX IF NOT EXISTS idx_portfolio_trades_entry_timestamp ON portfolio_trades(entry_timestamp DESC);

-- Indexes for tracked_wallets
CREATE INDEX IF NOT EXISTS idx_tracked_wallets_active ON tracked_wallets(is_active);
CREATE INDEX IF NOT EXISTS idx_tracked_wallets_created_at ON tracked_wallets(created_at DESC);

-- Indexes for tokens
CREATE INDEX IF NOT EXISTS idx_tokens_symbol ON tokens(symbol);
CREATE INDEX IF NOT EXISTS idx_tokens_name ON tokens(name);

-- =============================================================================
-- FUNCTIONS
-- =============================================================================

-- Function to check for multi-whale signals
CREATE OR REPLACE FUNCTION check_for_signals()
RETURNS TRIGGER AS $$
DECLARE
    config_rec RECORD;
    whale_count INTEGER;
    signal_exists BOOLEAN;
    whale_list TEXT[];
BEGIN
    -- Get the latest configuration
    SELECT * INTO config_rec FROM signal_config ORDER BY created_at DESC LIMIT 1;
    
    -- Check if we already have an open signal for this coin
    SELECT EXISTS(
        SELECT 1 FROM trade_signals
        WHERE coin_address = NEW.coin_address
        AND status = 'OPEN'
    ) INTO signal_exists;

    -- If signal already exists, skip
    IF signal_exists THEN
        RETURN NEW;
    END IF;

    -- Count unique whales that bought this coin in the time window
    SELECT COUNT(DISTINCT wallet_address), ARRAY_AGG(DISTINCT wallet_address)
    INTO whale_count, whale_list
    FROM whale_trades
    WHERE coin_address = NEW.coin_address
    AND trade_type = 'BUY'
    AND trade_timestamp >= NOW() - INTERVAL '1 hour' * config_rec.time_window_hours
    AND (sol_amount IS NULL OR sol_amount >= config_rec.min_trade_amount_sol);

    -- If threshold is met, create a signal
    IF whale_count >= config_rec.min_whales THEN
        INSERT INTO trade_signals (
            coin_address,
            status,
            trigger_reason,
            metadata
        ) VALUES (
            NEW.coin_address,
            'OPEN',
            whale_count || ' whales bought within ' || config_rec.time_window_hours || ' hour(s)',
            jsonb_build_object(
                'whale_addresses', whale_list,
                'whale_count', whale_count,
                'confidence', LEAST(whale_count / 5.0, 1.0)
            )
        );

        -- Notify real-time subscribers
        PERFORM pg_notify('new_signal', json_build_object(
            'coin_address', NEW.coin_address,
            'whale_count', whale_count,
            'whale_addresses', whale_list
        )::text);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to send signal webhook notifications
CREATE OR REPLACE FUNCTION notify_signal_webhook()
RETURNS TRIGGER AS $$
DECLARE
    webhook_url TEXT := 'http://localhost:3000/webhooks/db-changes';
    payload JSON;
BEGIN
    -- Build the payload
    payload := json_build_object(
        'table', 'trade_signals',
        'type', TG_OP,
        'record', row_to_json(NEW)
    );

    -- Make HTTP request to webhook
    PERFORM http_post(
        webhook_url,
        payload::TEXT,
        'application/json'
    );

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to send trade webhook notifications
CREATE OR REPLACE FUNCTION notify_trade_webhook()
RETURNS TRIGGER AS $$
DECLARE
    webhook_url TEXT := 'http://localhost:3000/webhooks/db-changes';
    payload JSON;
BEGIN
    -- Build the payload
    payload := json_build_object(
        'table', 'whale_trades',
        'type', TG_OP,
        'record', row_to_json(NEW)
    );

    -- Make HTTP request to webhook
    PERFORM http_post(
        webhook_url,
        payload::TEXT,
        'application/json'
    );

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to update service_configs timestamp
CREATE OR REPLACE FUNCTION update_service_config_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to test webhook functionality
CREATE OR REPLACE FUNCTION test_webhook()
RETURNS TEXT AS $$
DECLARE
    webhook_url TEXT := 'http://localhost:3000/webhooks/db-changes';
    response RECORD;
    test_payload JSON;
BEGIN
    test_payload := json_build_object(
        'table', 'test',
        'type', 'TEST',
        'record', json_build_object('message', 'Webhook test from Supabase')
    );

    -- Note: This is simplified for the migration file
    -- The actual implementation would use http extension
    RETURN 'Webhook test function created';
END;
$$ LANGUAGE plpgsql;

-- =============================================================================
-- TRIGGERS
-- =============================================================================

-- Trigger to check for signals after new whale trades
CREATE OR REPLACE TRIGGER trigger_check_signals
    AFTER INSERT ON whale_trades
    FOR EACH ROW
    EXECUTE FUNCTION check_for_signals();

-- Trigger to send webhook notifications for new trade_signals
CREATE OR REPLACE TRIGGER trade_signals_webhook_trigger
    AFTER INSERT ON trade_signals
    FOR EACH ROW
    EXECUTE FUNCTION notify_signal_webhook();

-- Trigger to send webhook notifications for new whale_trades
CREATE OR REPLACE TRIGGER whale_trades_webhook_trigger
    AFTER INSERT ON whale_trades
    FOR EACH ROW
    EXECUTE FUNCTION notify_trade_webhook();

-- Trigger to update service_configs timestamp on updates
CREATE OR REPLACE TRIGGER update_service_configs_timestamp
    BEFORE UPDATE ON service_configs
    FOR EACH ROW
    EXECUTE FUNCTION update_service_config_timestamp();

-- =============================================================================
-- VIEWS
-- =============================================================================

-- View for active signals with detailed information
CREATE OR REPLACE VIEW active_signals_detailed AS
SELECT 
    ts.id,
    ts.coin_address,
    ts.status,
    ts.trigger_reason,
    ts.metadata,
    ts.created_at,
    ts.closed_at,
    ts.user_notes,
    t.symbol AS token_symbol,
    t.name AS token_name,
    (
        SELECT COUNT(DISTINCT wt.wallet_address) AS count
        FROM whale_trades wt
        WHERE wt.coin_address = ts.coin_address
        AND wt.trade_timestamp >= (ts.created_at - INTERVAL '1 hour')
        AND wt.trade_type = 'BUY'
    ) AS whale_count,
    (
        SELECT STRING_AGG(DISTINCT COALESCE(tw.alias, wt.wallet_address), ', ')
        FROM whale_trades wt
        JOIN tracked_wallets tw ON wt.wallet_address = tw.address
        WHERE wt.coin_address = ts.coin_address
        AND wt.trade_timestamp >= (ts.created_at - INTERVAL '1 hour')
        AND wt.trade_type = 'BUY'
    ) AS whale_names
FROM trade_signals ts
LEFT JOIN tokens t ON ts.coin_address = t.address
WHERE ts.status = 'OPEN'
ORDER BY ts.created_at DESC;

-- View for dashboard statistics
CREATE OR REPLACE VIEW dashboard_stats AS
SELECT 
    (
        SELECT COUNT(*) 
        FROM tracked_wallets 
        WHERE is_active = true
    ) AS active_wallets,
    (
        SELECT COUNT(*) 
        FROM portfolio_trades 
        WHERE status = 'OPEN'
    ) AS open_positions,
    (
        SELECT COUNT(*) 
        FROM trade_signals 
        WHERE created_at > (now() - INTERVAL '24 hours')
    ) AS signals_today,
    (
        SELECT 
            CASE 
                WHEN COUNT(*) > 0 THEN ROUND((COUNT(*) FILTER (WHERE pnl_percentage > 0)::numeric / COUNT(*)::numeric * 100), 2)
                ELSE 0::numeric
            END
        FROM portfolio_trades
        WHERE status = 'CLOSED' AND pnl_percentage IS NOT NULL
    ) AS win_rate,
    (
        SELECT COALESCE(ROUND(SUM(pnl_percentage), 2), 0::numeric)
        FROM portfolio_trades
        WHERE status = 'CLOSED' AND pnl_percentage IS NOT NULL
    ) AS total_pnl;

-- View for recent whale trades with enriched data
CREATE OR REPLACE VIEW recent_whale_trades AS
SELECT 
    wt.id,
    wt.wallet_address,
    wt.coin_address,
    wt.trade_type,
    wt.sol_amount,
    wt.token_amount,
    wt.transaction_hash,
    wt.trade_timestamp,
    tw.alias AS wallet_alias,
    tw.ui_color AS wallet_color,
    tw.twitter_handle,
    tw.telegram_channel,
    tw.streaming_channel,
    tw.image_data,
    t.symbol AS token_symbol,
    t.name AS token_name
FROM whale_trades wt
JOIN tracked_wallets tw ON wt.wallet_address = tw.address
LEFT JOIN tokens t ON wt.coin_address = t.address
ORDER BY wt.trade_timestamp DESC
LIMIT 100;

-- =============================================================================
-- INITIAL DATA
-- =============================================================================

-- Insert default signal configuration
INSERT INTO signal_config (id, min_whales, time_window_hours, min_trade_amount_sol, created_at) 
SELECT '11111111-1111-1111-1111-111111111111', 3, 1, 0.5, NOW()
WHERE NOT EXISTS (SELECT 1 FROM signal_config);

-- Insert default service configurations
INSERT INTO service_configs (id, service_name, log_categories, other_settings, updated_at, ui_refresh_config)
SELECT '7464486b-6f2c-444b-8726-e155449b2f7b', 'whale-watcher', 
       '{"debug": false, "trade": true, "health": true, "wallet": true, "dataFlow": true, "connection": true, "multiWhale": true, "transaction": true}'::jsonb,
       '{}'::jsonb,
       NOW(),
       '{"pause_on_activity": true, "auto_refresh_enabled": true, "show_refresh_indicators": true, "balance_interval_minutes": 5}'::jsonb
WHERE NOT EXISTS (SELECT 1 FROM service_configs WHERE service_name = 'whale-watcher');

INSERT INTO service_configs (id, service_name, log_categories, other_settings, updated_at, ui_refresh_config)
SELECT '89968340-7319-4667-8c51-678985a44918', 'frontend-ui',
       '{"debug": false, "trade": true, "health": true, "wallet": true, "dataFlow": false, "connection": true, "multiWhale": true, "transaction": false}'::jsonb,
       '{}'::jsonb,
       NOW(),
       '{"pause_on_activity": false, "auto_refresh_enabled": true, "show_refresh_indicators": true, "balance_interval_minutes": 1}'::jsonb
WHERE NOT EXISTS (SELECT 1 FROM service_configs WHERE service_name = 'frontend-ui');

-- =============================================================================
-- COMMENTS
-- =============================================================================

COMMENT ON TABLE tracked_wallets IS 'Stores information about tracked whale wallets';
COMMENT ON TABLE tokens IS 'Stores token information for coins being traded';
COMMENT ON TABLE whale_trades IS 'Stores individual trade data from tracked wallets';
COMMENT ON TABLE trade_signals IS 'Stores multi-whale buy signals generated by the system';
COMMENT ON TABLE portfolio_trades IS 'Stores paper/live trade positions for portfolio tracking';
COMMENT ON TABLE signal_config IS 'Configuration for signal generation thresholds';
COMMENT ON TABLE service_heartbeats IS 'Health monitoring data for system services';
COMMENT ON TABLE service_configs IS 'Configuration settings for various system services';

COMMENT ON VIEW active_signals_detailed IS 'Detailed view of active trade signals with whale information';
COMMENT ON VIEW dashboard_stats IS 'Aggregated statistics for dashboard display';
COMMENT ON VIEW recent_whale_trades IS 'Recent whale trades with enriched wallet and token data';